{"pageProps":{"id":3,"title":"Custom CI/CD pipeline with AWS CodePipeline","name":"custom-ci-cd-pipeline-with-aws-codepipeline","date":1546776000,"content":"<p>Amazon Web Services offers a suite of products for handling continuous integration and continuous delivery workflows.\nAWS CodeCommit, CodeBuild and CodeDeploy are glued together by CodePipeline, a tool that allows you to define a\npipeline that automatically starts when a change happens in a repository.</p>\n<p>Usually, 3 steps are performed.</p>\n<ul>\n<li>The source step, that is triggered when a new commit is pushed to a particular branch of a specific <strong>CodeCommit</strong>\nrepository. In this step the new version of the source code is retrieved and passed over to the next step.</li>\n<li>The build step, which usually performs static code validation and creates an artifact ready to be deployed. <strong>CodeBuild</strong>\nis the tool you can use on AWS to implement such step. The output artifact is passed over to the next step.</li>\n<li>The deploy step, which receives the artifacts to deploy and perform deploy operations. AWS offers <strong>CodeDeploy</strong>, a\ntool you can use for defining automatic deploying processes and policies. It integrates very well with a limited set\nof AWS services, like AWS Lambda and EC2.</li>\n</ul>\n<p>There are <strong>some limitations</strong> with AWS CodeDeploy. What if the application you have to deploy does not run on AWS\nLambda nor EC2? For instance, you might have a website hosted on an S3 bucket and you want your deploy step to replace\nthe bucket content with the new version of the website. You canâ€™t do that with CodeDeploy.</p>\n<p>For achieving the desired result you can define a separate CodeBuild project that handles the deployment task.\nA CodeBuild project is just a <strong>Docker container</strong> which is spawn when the project runs and executes an instruction\nfile in project.</p>\n<p>I have written a CloudFormation template which creates a CodePipeline for the particular cases where the deployment\nstep falls outside the scope of CodeDeploy, where the user wants to perform some custom deployment operations.</p>\n<p>Features</p>\n<ul>\n<li>Supports two environments named staging and production.</li>\n<li>Custom deployment process which actually runs in CodeBuild.</li>\n<li>Manual approval before starting the production build.</li>\n</ul>\n<p>Here is an example of the pipeline the stack will generate:</p>\n<img src=\"/articles/3/aws-code-pipeline.png\" class=\"img-fluid mb-3\" alt=\"AWS Code Pipeline\">\n\n<p>The CodeCommit repository must exist prior the CloudFormation stack is created since the repository name is one of the\ninput parameters.</p>\n<p>The other two parameters are the two Docker images you want to use for the build and deploy steps.</p>\n<img src=\"/articles/3/cloud-formation.png\" class=\"img-fluid mb-3\" alt=\"AWS Cloud Formation\">\n\n<p>The <strong>IAM role</strong> which is generated for both CodeBuild projects has minimum permissions. If you need to extend it, you\ncan either manually update the template or create another stack with an extra\n<a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html\">IAM Policy</a> for the role.</p>\n<p>By default the pipeline stack will export the IAM Role ARN and name:</p>\n<img src=\"/articles/3/cloud-formation-stack.png\" class=\"img-fluid mb-3\" alt=\"AWS Cloud Formation\">\n\n<p>That&#39;s it. You can find the template and related instructions\n<a href=\"https://github.com/awslabs/aws-cloudformation-templates/tree/master/community/codestar/custom-ci-cd-pipeline\">here</a>.\nIf you have any questions, feel free to drop me a message or add a comment to my\n<a href=\"https://github.com/awslabs/aws-cloudformation-templates/pull/135\">pull request</a>.</p>\n","formattedDate":"January 6, 2019"},"__N_SSG":true}